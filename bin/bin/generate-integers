#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-
"""
Generate random integers and check quota with Random.org API.

Author's note: This is creative exercise (over-engineered), where the goal is not to solve a problem quickly but to craft a work of art that showcases somewhat advanced or obscure Python topics and my authorial flair.
"""

import argparse
import enum
import functools
import ipaddress
import logging
import sys
import typing
import urllib.error
import urllib.parse
import urllib.request
from dataclasses import asdict, dataclass, field

# ParamSpec for the 'before' decorator
Pb = typing.ParamSpec("Pb")
Rb = typing.TypeVar("Rb")

# ParamSpec for the 'after' decorator
Pa = typing.ParamSpec("Pa")
Ra = typing.TypeVar("Ra")


def before(bf: typing.Callable[Pb, Rb], *bfargs: Pb.args, **bfkwargs: Pb.kwargs):
    """Decorator to invoke a specified function before the decorated function."""

    def decorator[R, **P](df: typing.Callable[P, R]):
        @functools.wraps(df)
        def wrapper(*args: P.args, **kwargs: P.kwargs):
            _ = bf(*bfargs, **bfkwargs)
            return df(*args, **kwargs)

        return wrapper

    return decorator


def after(af: typing.Callable[Pa, Ra], *afargs: Pa.args, **afkwargs: Pa.kwargs):
    """Decorator to invoke a specified function after the decorated function."""

    def decorator[R, **P](df: typing.Callable[P, R]):
        @functools.wraps(df)
        def wrapper(*args: P.args, **kwargs: P.kwargs):
            try:
                return df(*args, **kwargs)
            except Exception as e:
                logging.error(e)
                raise
            finally:
                _ = af(*afargs, **afkwargs)

        return wrapper

    return decorator


@dataclass
class Config:
    quota_to_file: typing.IO = sys.stderr


class ExitCode(enum.IntEnum):
    OK = 0
    ERROR = 1


@dataclass
class IntegersRequest:
    """
    >>> IntegersRequest()
    IntegersRequest(num=1, min=0, max=0, col=1, base=10, format='plain', rnd='new')
    """

    num: int = 1
    min: int = 0
    max: int = 0
    col: int = 1
    base: int = 10
    format: typing.Literal["html", "plain"] = "plain"
    rnd: typing.Literal["new", "today", "yesterday"] = "new"

    def __post_init__(self):
        """
        >>> IntegersRequest(num=0)
        Traceback (most recent call last):
        ...
        ValueError: The number of integers requested must be in [1,1e4]
        >>> IntegersRequest(num=10_001)
        Traceback (most recent call last):
        ...
        ValueError: The number of integers requested must be in [1,1e4]
        >>> a = 1_000_000_000
        >>> test_cases = [-a-1, a+1]
        >>> for tc in test_cases: IntegersRequest(min=tc)
        Traceback (most recent call last):
        ...
        ValueError: The lower bound of the interval must be in [-1e9,1e9]
        >>> for tc in test_cases: IntegersRequest(max=tc)
        Traceback (most recent call last):
        ...
        ValueError: The upper bound of the interval must be in [-1e9,1e9]
        """
        if self.num < 1 or self.num > 1e4:
            raise ValueError("The number of integers requested must be in [1,1e4]")
        if self.min < -1e9 or self.min > 1e9:
            raise ValueError("The lower bound of the interval must be in [-1e9,1e9]")
        if self.max < -1e9 or self.max > 1e9:
            raise ValueError("The upper bound of the interval must be in [-1e9,1e9]")

    def get_url(self) -> str:
        """
        >>> IntegersRequest().get_url()
        'https://www.random.org/integers/?num=1&min=0&max=0&col=1&base=10&format=plain&rnd=new'
        """
        host = "www.random.org"
        params = urllib.parse.urlencode(asdict(self))
        return f"https://{host}/integers/?%s" % params


@dataclass
class IntegersPlainResponse:
    integers: list[int] = field(default_factory=list)


@dataclass
class QuotaRequest:
    ip: ipaddress.IPv4Address | ipaddress.IPv6Address | None = None
    format: typing.Literal["html", "plain"] = "plain"

    def get_url(self) -> str:
        """
        >>> QuotaRequest(ipaddress.ip_address('134.226.36.80')).get_url()
        'https://www.random.org/quota/?ip=134.226.36.80&format=plain'
        """
        host = "www.random.org"
        params = urllib.parse.urlencode(
            {k: v for k, v in asdict(self).items() if v is not None}
        )
        return f"https://{host}/quota/?%s" % params


@dataclass
class QuotaPlainResponse:
    quota: int


def generate_integers(req: IntegersRequest | None = None) -> IntegersPlainResponse:
    m = 1_000_000_000  # min and max possible values [-1e9,1e9] (inclusive)
    req = req if req is not None else IntegersRequest(min=-m, max=m)
    if req.format != "plain":
        raise ValueError("Only plain format is supported")
    with urllib.request.urlopen(req.get_url()) as f:
        print(f"HTTP status {f.status}: {f.reason}", file=sys.stderr)
        text = f.read().decode("utf-8").strip()
        response = IntegersPlainResponse(
            integers=[int(line) for line in text.split("\n")]
        )
        return response


def check_quota(req: QuotaRequest | None = None) -> QuotaPlainResponse:
    req = req if req is not None else QuotaRequest()
    if req.format != "plain":
        raise ValueError("Only plain format is supported")
    with urllib.request.urlopen(req.get_url()) as f:
        text = f.read().decode("utf-8").strip()
        return QuotaPlainResponse(quota=int(text))


def print_quota(to: typing.IO[str] | None = None):
    response = check_quota()
    print(f"Quota: {response.quota}", file=to)


@before(print_quota, to=Config.quota_to_file)
@after(print_quota, to=Config.quota_to_file)
def run() -> int:
    try:
        response = generate_integers()
    except urllib.error.HTTPError as e:
        print(f"HTTP status {e.status}: {e.reason}", file=sys.stderr)
        return ExitCode.ERROR
    except urllib.error.URLError as e:
        print(f"URL error: {e.reason}", file=sys.stderr)
        return ExitCode.ERROR
    else:
        for i in response.integers:
            print(i)
        return ExitCode.OK


def main(argv: typing.Sequence[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    _ = parser.parse_args(argv)
    try:
        return run()
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return ExitCode.ERROR


if __name__ == "__main__":
    import doctest

    if doctest.testmod().failed:
        raise SystemExit(ExitCode.ERROR)
    raise SystemExit(main(sys.argv[1:]))
